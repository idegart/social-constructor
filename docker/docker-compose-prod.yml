version: '3.7'

services:
  nginx:
    image: $CI_REGISTRY_IMAGE/nginx:$TAG
    build:
      context: ../
      dockerfile: docker/app/Dockerfile
    restart: always
    ports:
      - "91:80"
      - "92:80"
    networks:
      - prod-bot
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback  
      placement:
        constraints:
          - node.labels.stateless == true
    depends_on: 
      - app
    links:
      - app:app
    logging: &logging
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  app: &app
    image: $CI_REGISTRY_IMAGE/app:$TAG
    build:
      context: ../
      dockerfile: docker/app/Dockerfile
      target: app
    restart: always
    env_file: .env
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback 
      placement:
        constraints:
          - node.labels.stateless == true
    networks:
      - prod-bot
    depends_on: 
      - postgres
      - redis
    logging: *logging

  cron:
    <<: *app
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.stateless == true
    entrypoint: /app/docker/app/entrypoint_cron.sh

  queue_default:
    <<: *app
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.stateless == true
    entrypoint: /app/docker/app/entrypoint_queue_default.sh

  queue_notifications:
    <<: *app
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.stateless == true
    entrypoint: /app/docker/app/entrypoint_queue_notifications.sh

  postgres:
    image: postgres:11.2-alpine
    volumes:
      - /work/data/bot/pg/:/var/lib/postgresql/data
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    ports:
      - 5434:5432
    deploy:
      placement:
        constraints:
          - node.labels.node == pg-bot
    networks:
      - prod-bot
    logging: *logging

  redis:
    image: redis:5.0.1-alpine
    restart: always
    deploy:
      endpoint_mode: dnsrr
      placement:
        constraints:
          - node.labels.node == swarm1
    networks:
      - prod-bot
    logging: *logging

networks:
  prod-bot:
    external: true

